generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector(schema: "public")]
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id            String         @id @default(cuid())
  name          String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  folders       Folder[]       @relation("ProjectFolders")
  conversations Conversation[] @relation("ProjectConversations")
}

model Folder {
  id         String     @id @default(cuid())
  name       String
  parentId   String?
  projectId  String?
  parent     Folder?    @relation("FolderChildren", fields: [parentId], references: [id])
  children   Folder[]   @relation("FolderChildren")
  documents  Document[] @relation("FolderDocuments")
  project    Project?   @relation("ProjectFolders", fields: [projectId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  modifiedAt DateTime   @updatedAt
}

model Document {
  id             String           @id @default(cuid())
  name           String
  size           Int?
  mimeType       String?
  storagePath    String
  url            String?
  parentId       String?
  folder         Folder?          @relation("FolderDocuments", fields: [parentId], references: [id])
  createdAt      DateTime         @default(now())
  modifiedAt     DateTime         @updatedAt
  DocumentChunks DocumentChunks[]
}

model DocumentChunks {
  id         String                @id @default(cuid())
  documentId String
  chunkIndex Int // 0-based index of the chunk in the document
  text       String                @db.Text // the actual content of this chunk
  embedding  Unsupported("vector")
  createdAt  DateTime              @default(now())

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId, chunkIndex])
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  projectId String?
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project   Project?  @relation("ProjectConversations", fields: [projectId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id             String       @id
  conversationId String
  role           String
  content        String
  createdAt      DateTime     @default(now())
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
