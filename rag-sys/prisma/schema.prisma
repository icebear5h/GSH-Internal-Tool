generator client {
  provider        = "prisma-client-py"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector(schema: "public")]
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Broker        Broker[]
  BrokerUpdate  BrokerUpdate[]
  conversations Conversation[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id            String         @id @default(cuid())
  name          String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[] @relation("ProjectConversations")
  documents     Document[]     @relation("ProjectDocuments")
  folders       Folder[]       @relation("ProjectFolders")
  tasks         Task[]
}

model Task {
  id          String                 @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  priority    String                 @default("medium")
  projectId   String
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  status      String                 @default("pending")
  embedding   Unsupported("vector")?
  content     String?
  project     Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Folder {
  id         String     @id @default(cuid())
  name       String
  parentId   String?
  projectId  String?
  createdAt  DateTime   @default(now())
  modifiedAt DateTime   @updatedAt
  documents  Document[] @relation("FolderDocuments")
  parent     Folder?    @relation("FolderChildren", fields: [parentId], references: [id])
  children   Folder[]   @relation("FolderChildren")
  project    Project?   @relation("ProjectFolders", fields: [projectId], references: [id], onDelete: Cascade)
}

model Document {
  id            String          @id @default(cuid())
  name          String
  size          Int?
  mimeType      String?
  storagePath   String
  url           String?
  parentId      String?
  projectId     String?
  createdAt     DateTime        @default(now())
  modifiedAt    DateTime        @updatedAt
  folder        Folder?         @relation("FolderDocuments", fields: [parentId], references: [id])
  project       Project?        @relation("ProjectDocuments", fields: [projectId], references: [id], onDelete: Cascade)
  DocumentChunk DocumentChunk[]
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  projectId String?
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  project   Project?  @relation("ProjectConversations", fields: [projectId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages  Message[]
}

model Message {
  id             String                 @id @default(cuid())
  conversationId String
  role           String
  content        String
  embedding      Unsupported("vector")?
  createdAt      DateTime               @default(now())
  Conversation   Conversation           @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model DocumentChunk {
  id         String                 @id
  documentId String
  content    String
  embedding  Unsupported("vector")?
  createdAt  DateTime               @default(now())
  projectId  String?
  Document   Document               @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
}

model Broker {
  id            String         @id @default(cuid())
  name          String
  location      String?
  type          String?
  lastFollowUp  DateTime
  nextFollowUp  DateTime
  email         String?
  phone         String?
  userId        String?
  User          User?          @relation(fields: [userId], references: [id])
  brokerUpdates BrokerUpdate[]
}

model BrokerUpdate {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  brokerId  String
  userId    String
  broker    Broker   @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
